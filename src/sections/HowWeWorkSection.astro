---
import Image from "astro/components/Image.astro";
import Button from "../components/Button.astro";
import {PlusIcon, ArrowButtonLeft, ArrowButtonRight} from '../assets/icons'

const title = "Zo bouw ik aan jouw online succes";
const steps = [
  {
    listTitle: "Boek een gesprek",
    title: "Kennismakingsgesprek",
    steps: [
      "Ik leer je graag kennen: wie ben je, wat zijn je uitdagingen en wat is je doel?",
      "Hoe kan je website je helpen om die stip op de horizon te bereiken?"
    ],
    imageUrl: "/images/kennismaking.png",
    altText: "Remco in een video call"
  },
  {
    listTitle: "Strategie",
    title: "Strategie bepalen",
    steps: [
      "We duiken in je doelgroep: wie zijn ze en wat zoeken ze online?",
      "Samen maken we een plan: hoe genereer je (meer) leads met je website",
      "Je krijgt een heldere roadmap: zo gaan we jouw online doelen halen"
    ],
    imageUrl: "/images/kennismaking.png",
    altText: "Remco in een video call"
  },
  {
    listTitle: "Ontwerp",
    title: "Ontwerp",
    steps: [
      "Je krijgt een design dat niet alleen mooi is, maar dat vooral werkt voor je klanten",
      "We focussen op gebruiksgemak en conversie: elke bezoeker telt",
      "Het resultaat? Een website die je doelgroep aanspreekt én die past bij je bedrijf "
    ],
    imageUrl: "/images/kennismaking.png",
    altText: "Remco in een video call"
  },
  {
    listTitle: "Ontwikkeling",
    title: "Website bouwen",
    steps: [
      "Vervolgens bouw ik je website met oog voor techniek, snelheid en veiligheid",
      "Alle functionaliteiten worden precies zo gebouwd als jij ze nodig hebt",
      "Ik werk samen met professionals om voor jou een website te bouwen die niet  alleen nú werkt, maar ook in de toekomst"
    ],
    imageUrl: "/images/kennismaking.png",
    altText: "Remco in een video call"
  },
  {
    listTitle: "Lanceren",
    title: "Live gaan",
    steps: [
      "We testen alles grondig voor de lancering",
      "Je website wordt geoptimaliseerd voor zoekmachines",
      "Als je wilt, leer ik je hoe je zelf content kunt beheren "
    ],
    imageUrl: "/images/kennismaking.png",
    altText: "Remco in een video call"
  },
  {
    listTitle: "Door ontwikkelen",
    title: "Door ontwikkelen",
    steps: [
      "Je website blijft up-to-date met regelmatige updates en verbeteringen",
      "Ik monitor de prestaties en optimaliseer waar nodig"
    ],
    imageUrl: "/images/kennismaking.png",
    altText: "Remco in een video call"
  },
]

const iconColor = "var(--clr-primary-500)"
const iconColorActive = "var(--clr-primary-300)"

---


<section class="fb-col-wrapper" id="how-we-work">
  <div class="steps-list-wrapper">
    <h2>{title}</h2>
    <ul role="list" class="steps-list">
      {
        steps.map((step, i) => {
          return  (
          <li class="step">0{i + 1} {step.listTitle}</li>
        )
        })
      }
    </ul>

    <a href="/contact" class="btn btn-primary">
      Vrijblijvende afspraak
    </a>

  </div>

  <div class="steps">
    <div class="steps-container">
      {
        steps.map((step, i) => {
          return (
              <div class="steps-wrapper">
                <div class="steps-content">
                  <h2>{step.title}</h2>
                  <ul role="list">
                    {
                      step.steps.map(s => {
                        return <li class="list-item"><div class="steps-icon"><PlusIcon /></div><p>{s}</p></li>
                      })
                    }
                  </ul>
                </div>
                <Image
                  alt={step.altText}
                  class="steps-image"
                  height="300"
                  src={step.imageUrl}
                  width="300"
                  />
              </div>
              )
          })
      }
    </div>
    <div class="btn-wrapper">
      <Button buttonStyle="arrow-btn" buttonId="btn-previous" >
        <ArrowButtonLeft iconFill={iconColor} />
      </Button>
      <Button buttonStyle="arrow-btn" buttonId="btn-next" >
        <ArrowButtonRight iconFill={iconColorActive} />
      </Button>
    </div>
  </div>
</section>

<script>

  const stepsContainer = document.querySelector(".steps-container")
  const stepsList = document.querySelector(".steps-list");
  const steps = Array.from(stepsList.querySelectorAll(".step"))
  steps[0].classList.add("active")
  const stepsWrappers = Array.from(stepsContainer.querySelectorAll(".steps-wrapper"));
  stepsWrappers[0].classList.add("is-selected");
  const previousButton = document.querySelector("#btn-previous")
  const nextButton = document.querySelector("#btn-next")
  const iconArrowLeft = document.querySelector("#icon-arrow-left")
  const iconArrowRight = document.querySelector("#icon-arrow-right")
  const iconColor = "var(--clr-primary-500)"
  const iconColorActive = "var(--clr-primary-300)"

  function previousSlide(e) {
    const currentSlide = stepsContainer.querySelector(".is-selected");
    const previousSlide = currentSlide.previousElementSibling
    const currentStep = stepsList.querySelector(".active")
    const previousStep = currentStep.previousElementSibling

    if(!previousSlide.previousElementSibling) {
      e.currentTarget.style.cursor = "not-allowed"
      iconArrowLeft.setAttribute("stroke",  `${iconColor}`)
      e.currentTarget.removeEventListener("click", previousSlide);
    }
    currentSlide.classList.remove("is-selected")
    currentStep.classList.remove("active")
    previousSlide.classList.add("is-selected")
    previousStep.classList.add("active")
    iconArrowRight.setAttribute("stroke", `${iconColorActive}`)
  }


  function nextSlide(e) {
    const currentSlide = stepsContainer.querySelector(".is-selected");
    const nextSlide = currentSlide.nextElementSibling
    const currentStep = stepsList.querySelector(".active")
    const nextStep = currentStep.nextElementSibling

    if(!nextSlide.nextElementSibling) {
      e.currentTarget.style.cursor = "not-allowed"
      iconArrowRight.setAttribute("stroke",  `${iconColor}`)
      e.currentTarget.removeEventListener("click", nextSlide);
    }
    currentSlide.classList.remove("is-selected")
    currentStep.classList.remove("active")
    nextSlide.classList.add("is-selected")
    nextStep.classList.add("active")
    iconArrowLeft.setAttribute("stroke", `${iconColorActive}`)
  }

  function handelingSteps(e) {
    let clickedStepIndex;
    for( let i = 0; i < steps.length; i++) {
      if(steps[i] === e.currentTarget) {
        clickedStepIndex = i
      }
    }

    stepsWrappers.forEach(step => {
      step.classList.remove("is-selected")
    })

    steps.forEach(step => step.classList.remove("active"))
    e.currentTarget.classList.add("active")

    const steptToShow = stepsWrappers[clickedStepIndex]
    steptToShow.classList.add("is-selected")

    if(clickedStepIndex === 0) {
      iconArrowLeft.setAttribute("stroke",  `${iconColor}`)
      iconArrowRight.setAttribute("stroke", `${iconColorActive}`)
    } else if (clickedStepIndex === stepsWrappers.length -1) {
      iconArrowLeft.setAttribute("stroke",  `${iconColorActive}`)
      iconArrowRight.setAttribute("stroke", `${iconColor}`)
    } else {
      iconArrowLeft.setAttribute("stroke",  `${iconColorActive}`)
      iconArrowRight.setAttribute("stroke", `${iconColorActive}`)
    }
  }



  steps.forEach(step => {
    step.addEventListener("click", handelingSteps)
  })
  previousButton.addEventListener("click", previousSlide)
  nextButton.addEventListener("click", nextSlide)
</script>


<style>
  #how-we-work {
    background-color: var(--clr-primary-700);
    color: var(--clr-primary-300);
    padding-block: var(--size-8);
  }


  .steps-list-wrapper {
    grid-column: 2 / 6;
    display: grid;
    gap: var(--size-3);
    padding-inline-end: var(--size-3);
    border-right: solid 1px var(--clr-primary-500);

    .steps-list {
      display: grid;
      gap: var(--size-1);
      color: var(--clr-primary-500);

      .step {
        cursor: pointer;
      }

    }

    .active {
      font-size: var(--fw-semi-bold);
      color: var(--clr-primary-300);
    }
  }


  .steps {
    grid-column: -2 / 6;
    align-items: stretch;

    .steps-container {
      height: 90%;
      .steps-wrapper {
        display: none;
        gap: var(--size-3);
        grid-template-columns: 70% 30%;
        padding-inline-start: var(--size-3);

        .steps-content {
          display: flex;
          flex-direction: column;
          gap: var(--size-3);

          li {
            align-items: flex-start;
            display: flex;
            gap: var(--size-1);
            padding-block: 0.5rem;

            .steps-icon {
              display: flex;
              justify-content: center;
              align-items: center;
              height: var(--size-2);
              width: var(--size-2);
              svg {
                height: 100%;
                width: 100%;
              }
            }

            p {
              max-width: 90%;
            }
          }
        }

        .steps-image {
          margin-block: auto;
          object-fit: cover;
          height: 25rem;
          width: auto;
          border-radius: var(--border-radius-img);
        }
      }

      .is-selected {
        display: grid;
      }
    }

    .btn-wrapper {
      display: flex;
      gap: var(--size-1);
      margin-top: auto;
    }
  }


</style>
