---
import Image from "astro/components/Image.astro";
import Button from "../components/Button.astro";
import { PlusIcon, ArrowButtonLeft, ArrowButtonRight } from "../assets/icons";

const { title, steps } = Astro.props;

const iconColor = "var(--clr-primary-500)";
const iconColorActive = "var(--clr-primary-300)";
---

<section class="fb-col-wrapper" id="how-we-work">
  <h2 id="section-title">{title}</h2>
  <div class="how-we-work-wrapper">
    <div class="steps-list-wrapper">
      <ul role="list" class="steps-list">
        {
          steps.map((step: { listTitle: unknown }, i: number) => {
            return (
              <li class="step">
                0{i + 1} <span>{step.listTitle}</span>{" "}
              </li>
            );
          })
        }
      </ul>
    </div>

    <div class="steps">
      <div class="steps-container">
        {
          steps.map((step: { title: unknown; steps: any[] }, i: any) => {
            return (
              <div class="steps-wrapper">
                <div class="steps-content">
                  <h3>{step.title}</h3>
                  <ul role="list">
                    {step.steps.map((s: unknown) => {
                      return (
                        <li class="list-item">
                          <div class="steps-icon">
                            <PlusIcon />
                          </div>
                          <p>{s}</p>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              </div>
            );
          })
        }
      </div>
    </div>
  </div>
  <div class="btn-wrapper">
    <a
      href="/contact"
      class="btn btn-secondary"
      aria-label="klick voor een vrijblijvend afspraak"
    >
      Vrijblijvende afspraak
    </a>

    <div class="arrow-buttons">
      <Button
        buttonStyle="arrow-btn"
        buttonId="btn-previous"
        ariaLabel="knop voor vorige in lijst"
      >
        <ArrowButtonLeft iconFill={iconColor} />
      </Button>
      <Button
        buttonStyle="arrow-btn"
        buttonId="btn-next"
        ariaLabel="knop voor volgende in lijst"
      >
        <ArrowButtonRight iconFill={iconColorActive} />
      </Button>
    </div>
  </div>
</section>

<script is:inline>
  const stepsContainer = document.querySelector(".steps-container");
  const stepsList = document.querySelector(".steps-list");
  const steps = Array.from(stepsList.querySelectorAll(".step"));
  steps[0].classList.add("active");
  const stepsWrappers = Array.from(
    stepsContainer.querySelectorAll(".steps-wrapper")
  );
  stepsWrappers[0].classList.add("is-selected");
  const previousButton = document.querySelector("#btn-previous");
  const nextButton = document.querySelector("#btn-next");
  const iconArrowLeft = document.querySelector("#icon-arrow-left");
  const iconArrowRight = document.querySelector("#icon-arrow-right");
  const iconColor = "var(--clr-primary-500)";
  const iconColorActive = "var(--clr-primary-300)";

  function previousSlide(e) {
    const currentSlide = stepsContainer.querySelector(".is-selected");
    const previousSlide = currentSlide.previousElementSibling;
    const currentStep = stepsList.querySelector(".active");
    const previousStep = currentStep.previousElementSibling;

    if (!previousSlide.previousElementSibling) {
      e.currentTarget.style.cursor = "not-allowed";
      iconArrowLeft.setAttribute("stroke", `${iconColor}`);
      e.currentTarget.removeEventListener("click", previousSlide);
    }
    currentSlide.classList.remove("is-selected");
    currentStep.classList.remove("active");
    previousSlide.classList.add("is-selected");
    previousStep.classList.add("active");
    iconArrowRight.setAttribute("stroke", `${iconColorActive}`);
  }

  function nextSlide(e) {
    const currentSlide = stepsContainer.querySelector(".is-selected");
    const nextSlide = currentSlide.nextElementSibling;
    const currentStep = stepsList.querySelector(".active");
    const nextStep = currentStep.nextElementSibling;

    if (!nextSlide.nextElementSibling) {
      e.currentTarget.style.cursor = "not-allowed";
      iconArrowRight.setAttribute("stroke", `${iconColor}`);
      e.currentTarget.removeEventListener("click", nextSlide);
    }
    currentSlide.classList.remove("is-selected");
    currentStep.classList.remove("active");
    nextSlide.classList.add("is-selected");
    nextStep.classList.add("active");
    iconArrowLeft.setAttribute("stroke", `${iconColorActive}`);
  }

  function handelingSteps(e) {
    let clickedStepIndex;
    for (let i = 0; i < steps.length; i++) {
      if (steps[i] === e.currentTarget) {
        clickedStepIndex = i;
      }
    }

    stepsWrappers.forEach((step) => {
      step.classList.remove("is-selected");
    });

    steps.forEach((step) => step.classList.remove("active"));
    e.currentTarget.classList.add("active");

    const steptToShow = stepsWrappers[clickedStepIndex];
    steptToShow.classList.add("is-selected");

    if (clickedStepIndex === 0) {
      iconArrowLeft.setAttribute("stroke", `${iconColor}`);
      iconArrowRight.setAttribute("stroke", `${iconColorActive}`);
    } else if (clickedStepIndex === stepsWrappers.length - 1) {
      iconArrowLeft.setAttribute("stroke", `${iconColorActive}`);
      iconArrowRight.setAttribute("stroke", `${iconColor}`);
    } else {
      iconArrowLeft.setAttribute("stroke", `${iconColorActive}`);
      iconArrowRight.setAttribute("stroke", `${iconColorActive}`);
    }
  }

  steps.forEach((step) => {
    step.addEventListener("click", handelingSteps);
  });
  previousButton.addEventListener("click", previousSlide);
  nextButton.addEventListener("click", nextSlide);
</script>

<style>
  #how-we-work {
    background-color: var(--clr-primary-700);
    color: var(--clr-primary-300);
    padding-block: var(--size-8);
  }

  #section-title {
    grid-column: 2 /-2;
    text-align: center;
    margin-block-end: var(--size-3);
  }

  h2,
  h3 {
    color: var(--clr-primary-100);
    text-align: center;
  }

  .how-we-work-wrapper {
    display: flex;
    flex-direction: column;
    grid-column: 2 / -2;
  }

  .steps-list-wrapper {
    display: grid;
    gap: var(--size-3);
    justify-content: center;
    padding-inline-end: var(--size-3);
    width: 100%;

    .steps-list {
      color: var(--clr-primary-500);
      display: flex;
      gap: var(--size-1);

      .step {
        cursor: pointer;

        span {
          display: none;
        }
      }
    }

    .active {
      color: var(--clr-primary-300);
      font-size: var(--fw-semi-bold);
    }
  }

  .steps {
    text-align: center;
    width: 100%;

    .steps-container {
      height: 90%;

      .steps-wrapper {
        display: none;
        grid-template-columns: 100%;
        margin-top: var(--size-3);

        .steps-content {
          display: flex;
          flex-direction: column;
          gap: var(--size-3);

          li {
            align-items: flex-start;
            display: flex;
            gap: var(--size-1);
            padding-block: 0.5rem;

            .steps-icon {
              align-items: center;
              display: flex;
              height: var(--size-2);
              justify-content: center;
              width: var(--size-2);

              svg {
                height: 100%;
                width: 100%;
              }
            }

            p {
              max-width: 90%;
            }
          }
        }

        .steps-image {
          display: none;
        }
      }

      .is-selected {
        display: grid;
      }
    }
  }

  .btn-wrapper {
    display: flex;
    flex-direction: column-reverse;
    gap: var(--size-1);
    grid-column: 2 / -2;
    margin-top: var(--size-3);

    .arrow-buttons {
      align-items: center;
      display: flex;
      gap: var(--size-1);
      margin-bottom: var(--size-2);
    }
  }

  @media (width >= 43.75em) {
    h2,
    h3 {
      text-align: unset;
    }
    .how-we-work-wrapper {
      flex-direction: row;
    }
    .steps-list-wrapper {
      border-right: solid 1px var(--clr-primary-300);
      justify-content: unset;
      width: 40%;

      .steps-list {
        flex-direction: column;

        .step {
          span {
            display: inline-block;
          }
        }
      }
    }

    .steps {
      padding-inline-start: var(--size-3);
      text-align: unset;
      width: 60%;

      .steps-container {
        .steps-wrapper {
          grid-template-columns: 70%;
          margin-top: unset;
        }
      }
    }

    .btn-wrapper {
      grid-column: 2 / 5;
      flex-direction: row;

      .arrow-buttons {
        justify-content: flex-start;
        margin-bottom: unset;
      }
    }
  }

  @media (width >= 62.5em) {
    .steps {
      .steps-container {
        .steps-wrapper {
          .steps-image {
            border-radius: var(--border-radius-img);
            display: inline-block;
            height: 25rem;
            margin-block: auto;
            object-fit: cover;
            width: auto;
          }
        }
      }
    }

    .btn-wrapper {
      grid-column: 2 / 8;
      .arrow-buttons {
        margin-inline-start: var(--size-3);
      }
    }
  }
</style>
